// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by thriftrw v1.13.1. DO NOT EDIT.
// @generated

package indexer

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/uber/cadence/.gen/go/shared"
	"go.uber.org/multierr"
	"go.uber.org/thriftrw/wire"
	"go.uber.org/zap/zapcore"
	"math"
	"strconv"
	"strings"
)

type VisibilityMsg struct {
	MsgType       *VisibilityMsgType                   `json:"msgType,omitempty"`
	DomainID      *string                              `json:"domainID,omitempty"`
	WorkflowID    *string                              `json:"workflowID,omitempty"`
	RunID         *string                              `json:"runID,omitempty"`
	WorkflowType  *string                              `json:"workflowType,omitempty"`
	StartTime     *int64                               `json:"startTime,omitempty"`
	CloseTime     *int64                               `json:"closeTime,omitempty"`
	CloseStatus   *shared.WorkflowExecutionCloseStatus `json:"closeStatus,omitempty"`
	HistoryLength *int64                               `json:"historyLength,omitempty"`
}

// ToWire translates a VisibilityMsg struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *VisibilityMsg) ToWire() (wire.Value, error) {
	var (
		fields [9]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.MsgType != nil {
		w, err = v.MsgType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.DomainID != nil {
		w, err = wire.NewValueString(*(v.DomainID)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.WorkflowID != nil {
		w, err = wire.NewValueString(*(v.WorkflowID)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}
	if v.RunID != nil {
		w, err = wire.NewValueString(*(v.RunID)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 40, Value: w}
		i++
	}
	if v.WorkflowType != nil {
		w, err = wire.NewValueString(*(v.WorkflowType)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 50, Value: w}
		i++
	}
	if v.StartTime != nil {
		w, err = wire.NewValueI64(*(v.StartTime)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 60, Value: w}
		i++
	}
	if v.CloseTime != nil {
		w, err = wire.NewValueI64(*(v.CloseTime)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 70, Value: w}
		i++
	}
	if v.CloseStatus != nil {
		w, err = v.CloseStatus.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 80, Value: w}
		i++
	}
	if v.HistoryLength != nil {
		w, err = wire.NewValueI64(*(v.HistoryLength)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 90, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _VisibilityMsgType_Read(w wire.Value) (VisibilityMsgType, error) {
	var v VisibilityMsgType
	err := v.FromWire(w)
	return v, err
}

func _WorkflowExecutionCloseStatus_Read(w wire.Value) (shared.WorkflowExecutionCloseStatus, error) {
	var v shared.WorkflowExecutionCloseStatus
	err := v.FromWire(w)
	return v, err
}

// FromWire deserializes a VisibilityMsg struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a VisibilityMsg struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v VisibilityMsg
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *VisibilityMsg) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TI32 {
				var x VisibilityMsgType
				x, err = _VisibilityMsgType_Read(field.Value)
				v.MsgType = &x
				if err != nil {
					return err
				}

			}
		case 20:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.DomainID = &x
				if err != nil {
					return err
				}

			}
		case 30:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowID = &x
				if err != nil {
					return err
				}

			}
		case 40:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.RunID = &x
				if err != nil {
					return err
				}

			}
		case 50:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.WorkflowType = &x
				if err != nil {
					return err
				}

			}
		case 60:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.StartTime = &x
				if err != nil {
					return err
				}

			}
		case 70:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.CloseTime = &x
				if err != nil {
					return err
				}

			}
		case 80:
			if field.Value.Type() == wire.TI32 {
				var x shared.WorkflowExecutionCloseStatus
				x, err = _WorkflowExecutionCloseStatus_Read(field.Value)
				v.CloseStatus = &x
				if err != nil {
					return err
				}

			}
		case 90:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.HistoryLength = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a VisibilityMsg
// struct.
func (v *VisibilityMsg) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [9]string
	i := 0
	if v.MsgType != nil {
		fields[i] = fmt.Sprintf("MsgType: %v", *(v.MsgType))
		i++
	}
	if v.DomainID != nil {
		fields[i] = fmt.Sprintf("DomainID: %v", *(v.DomainID))
		i++
	}
	if v.WorkflowID != nil {
		fields[i] = fmt.Sprintf("WorkflowID: %v", *(v.WorkflowID))
		i++
	}
	if v.RunID != nil {
		fields[i] = fmt.Sprintf("RunID: %v", *(v.RunID))
		i++
	}
	if v.WorkflowType != nil {
		fields[i] = fmt.Sprintf("WorkflowType: %v", *(v.WorkflowType))
		i++
	}
	if v.StartTime != nil {
		fields[i] = fmt.Sprintf("StartTime: %v", *(v.StartTime))
		i++
	}
	if v.CloseTime != nil {
		fields[i] = fmt.Sprintf("CloseTime: %v", *(v.CloseTime))
		i++
	}
	if v.CloseStatus != nil {
		fields[i] = fmt.Sprintf("CloseStatus: %v", *(v.CloseStatus))
		i++
	}
	if v.HistoryLength != nil {
		fields[i] = fmt.Sprintf("HistoryLength: %v", *(v.HistoryLength))
		i++
	}

	return fmt.Sprintf("VisibilityMsg{%v}", strings.Join(fields[:i], ", "))
}

func _VisibilityMsgType_EqualsPtr(lhs, rhs *VisibilityMsgType) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

func _String_EqualsPtr(lhs, rhs *string) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _I64_EqualsPtr(lhs, rhs *int64) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _WorkflowExecutionCloseStatus_EqualsPtr(lhs, rhs *shared.WorkflowExecutionCloseStatus) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this VisibilityMsg match the
// provided VisibilityMsg.
//
// This function performs a deep comparison.
func (v *VisibilityMsg) Equals(rhs *VisibilityMsg) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !_VisibilityMsgType_EqualsPtr(v.MsgType, rhs.MsgType) {
		return false
	}
	if !_String_EqualsPtr(v.DomainID, rhs.DomainID) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowID, rhs.WorkflowID) {
		return false
	}
	if !_String_EqualsPtr(v.RunID, rhs.RunID) {
		return false
	}
	if !_String_EqualsPtr(v.WorkflowType, rhs.WorkflowType) {
		return false
	}
	if !_I64_EqualsPtr(v.StartTime, rhs.StartTime) {
		return false
	}
	if !_I64_EqualsPtr(v.CloseTime, rhs.CloseTime) {
		return false
	}
	if !_WorkflowExecutionCloseStatus_EqualsPtr(v.CloseStatus, rhs.CloseStatus) {
		return false
	}
	if !_I64_EqualsPtr(v.HistoryLength, rhs.HistoryLength) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of VisibilityMsg.
func (v *VisibilityMsg) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.MsgType != nil {
		err = multierr.Append(err, enc.AddObject("msgType", *v.MsgType))
	}
	if v.DomainID != nil {
		enc.AddString("domainID", *v.DomainID)
	}
	if v.WorkflowID != nil {
		enc.AddString("workflowID", *v.WorkflowID)
	}
	if v.RunID != nil {
		enc.AddString("runID", *v.RunID)
	}
	if v.WorkflowType != nil {
		enc.AddString("workflowType", *v.WorkflowType)
	}
	if v.StartTime != nil {
		enc.AddInt64("startTime", *v.StartTime)
	}
	if v.CloseTime != nil {
		enc.AddInt64("closeTime", *v.CloseTime)
	}
	if v.CloseStatus != nil {
		err = multierr.Append(err, enc.AddObject("closeStatus", *v.CloseStatus))
	}
	if v.HistoryLength != nil {
		enc.AddInt64("historyLength", *v.HistoryLength)
	}
	return err
}

// GetMsgType returns the value of MsgType if it is set or its
// zero value if it is unset.
func (v *VisibilityMsg) GetMsgType() (o VisibilityMsgType) {
	if v.MsgType != nil {
		return *v.MsgType
	}

	return
}

// GetDomainID returns the value of DomainID if it is set or its
// zero value if it is unset.
func (v *VisibilityMsg) GetDomainID() (o string) {
	if v.DomainID != nil {
		return *v.DomainID
	}

	return
}

// GetWorkflowID returns the value of WorkflowID if it is set or its
// zero value if it is unset.
func (v *VisibilityMsg) GetWorkflowID() (o string) {
	if v.WorkflowID != nil {
		return *v.WorkflowID
	}

	return
}

// GetRunID returns the value of RunID if it is set or its
// zero value if it is unset.
func (v *VisibilityMsg) GetRunID() (o string) {
	if v.RunID != nil {
		return *v.RunID
	}

	return
}

// GetWorkflowType returns the value of WorkflowType if it is set or its
// zero value if it is unset.
func (v *VisibilityMsg) GetWorkflowType() (o string) {
	if v.WorkflowType != nil {
		return *v.WorkflowType
	}

	return
}

// GetStartTime returns the value of StartTime if it is set or its
// zero value if it is unset.
func (v *VisibilityMsg) GetStartTime() (o int64) {
	if v.StartTime != nil {
		return *v.StartTime
	}

	return
}

// GetCloseTime returns the value of CloseTime if it is set or its
// zero value if it is unset.
func (v *VisibilityMsg) GetCloseTime() (o int64) {
	if v.CloseTime != nil {
		return *v.CloseTime
	}

	return
}

// GetCloseStatus returns the value of CloseStatus if it is set or its
// zero value if it is unset.
func (v *VisibilityMsg) GetCloseStatus() (o shared.WorkflowExecutionCloseStatus) {
	if v.CloseStatus != nil {
		return *v.CloseStatus
	}

	return
}

// GetHistoryLength returns the value of HistoryLength if it is set or its
// zero value if it is unset.
func (v *VisibilityMsg) GetHistoryLength() (o int64) {
	if v.HistoryLength != nil {
		return *v.HistoryLength
	}

	return
}

type VisibilityMsgType int32

const (
	VisibilityMsgTypeOpen   VisibilityMsgType = 0
	VisibilityMsgTypeClosed VisibilityMsgType = 1
	VisibilityMsgTypeDelete VisibilityMsgType = 2
)

// VisibilityMsgType_Values returns all recognized values of VisibilityMsgType.
func VisibilityMsgType_Values() []VisibilityMsgType {
	return []VisibilityMsgType{
		VisibilityMsgTypeOpen,
		VisibilityMsgTypeClosed,
		VisibilityMsgTypeDelete,
	}
}

// UnmarshalText tries to decode VisibilityMsgType from a byte slice
// containing its name.
//
//   var v VisibilityMsgType
//   err := v.UnmarshalText([]byte("Open"))
func (v *VisibilityMsgType) UnmarshalText(value []byte) error {
	switch s := string(value); s {
	case "Open":
		*v = VisibilityMsgTypeOpen
		return nil
	case "Closed":
		*v = VisibilityMsgTypeClosed
		return nil
	case "Delete":
		*v = VisibilityMsgTypeDelete
		return nil
	default:
		val, err := strconv.ParseInt(s, 10, 32)
		if err != nil {
			return fmt.Errorf("unknown enum value %q for %q: %v", s, "VisibilityMsgType", err)
		}
		*v = VisibilityMsgType(val)
		return nil
	}
}

// MarshalText encodes VisibilityMsgType to text.
//
// If the enum value is recognized, its name is returned. Otherwise,
// its integer value is returned.
//
// This implements the TextMarshaler interface.
func (v VisibilityMsgType) MarshalText() ([]byte, error) {
	switch int32(v) {
	case 0:
		return []byte("Open"), nil
	case 1:
		return []byte("Closed"), nil
	case 2:
		return []byte("Delete"), nil
	}
	return []byte(strconv.FormatInt(int64(v), 10)), nil
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of VisibilityMsgType.
// Enums are logged as objects, where the value is logged with key "value", and
// if this value's name is known, the name is logged with key "name".
func (v VisibilityMsgType) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	enc.AddInt32("value", int32(v))
	switch int32(v) {
	case 0:
		enc.AddString("name", "Open")
	case 1:
		enc.AddString("name", "Closed")
	case 2:
		enc.AddString("name", "Delete")
	}
	return nil
}

// Ptr returns a pointer to this enum value.
func (v VisibilityMsgType) Ptr() *VisibilityMsgType {
	return &v
}

// ToWire translates VisibilityMsgType into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// Enums are represented as 32-bit integers over the wire.
func (v VisibilityMsgType) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

// FromWire deserializes VisibilityMsgType from its Thrift-level
// representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TI32)
//   if err != nil {
//     return VisibilityMsgType(0), err
//   }
//
//   var v VisibilityMsgType
//   if err := v.FromWire(x); err != nil {
//     return VisibilityMsgType(0), err
//   }
//   return v, nil
func (v *VisibilityMsgType) FromWire(w wire.Value) error {
	*v = (VisibilityMsgType)(w.GetI32())
	return nil
}

// String returns a readable string representation of VisibilityMsgType.
func (v VisibilityMsgType) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "Open"
	case 1:
		return "Closed"
	case 2:
		return "Delete"
	}
	return fmt.Sprintf("VisibilityMsgType(%d)", w)
}

// Equals returns true if this VisibilityMsgType value matches the provided
// value.
func (v VisibilityMsgType) Equals(rhs VisibilityMsgType) bool {
	return v == rhs
}

// MarshalJSON serializes VisibilityMsgType into JSON.
//
// If the enum value is recognized, its name is returned. Otherwise,
// its integer value is returned.
//
// This implements json.Marshaler.
func (v VisibilityMsgType) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"Open\""), nil
	case 1:
		return ([]byte)("\"Closed\""), nil
	case 2:
		return ([]byte)("\"Delete\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

// UnmarshalJSON attempts to decode VisibilityMsgType from its JSON
// representation.
//
// This implementation supports both, numeric and string inputs. If a
// string is provided, it must be a known enum name.
//
// This implements json.Unmarshaler.
func (v *VisibilityMsgType) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}

	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "VisibilityMsgType")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "VisibilityMsgType")
		}
		*v = (VisibilityMsgType)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "VisibilityMsgType")
	}
}
